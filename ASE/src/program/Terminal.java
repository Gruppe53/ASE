package program;

import connect.ITerminalConnection;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import databaseAccess.*;



public class Terminal implements ITerminal {
	
	private int okcount = 0;
	private ITerminalConnection con;
	private DBAccess dbAccess;
	
	public Terminal(ITerminalConnection con) {
		this.con = con;
	}

	@Override
	public String terminalConnect(String host, String port) {
		if(con.terminalConnect(host, port))
			return getConnection();
		else
			return "Could not connect";
	}

	@Override
	public String terminalDisconnect() {
	con.terminalDisconnect();
		
		return getConnection();
	}

	@Override
	public String terminalRead() {
		String str = con.getTerminalResponse("S");
		
		return "Current scale weight: " + getDigit(str) + " " + getUnit(str);
	}

	@Override
	public String terminalTare() {
		String str = con.getTerminalResponse("T");
		
		return "Scale tared, tara reads: " + getDigit(str) + " " + getUnit(str);
	}

	@Override
	public String terminalZero() {
		con.getTerminalResponse("Z");
		
		return "Scale has been zeroed.";
	}

	@Override
	public String terminalOkWeight() throws Exception {
		
		if (okcount == 3){
			okcount = 0;
		}
		
		if (okcount == 0){
			okcount++;
			return terminalZero();
		}
		else 
		if (okcount == 1) {
			okcount++;
			dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
			try {
				dbAccess.doSqlUpdate("" + getDigit("S"));
			} catch (DALException e) {
				e.printStackTrace();
			}
			finally{
				try{
					dbAccess.closeSql();
				}
				catch (SQLException e) {
					e.printStackTrace();
				}
			}
			return terminalTare();
		}
		//Has put try/catch autogenerated on both UPDATES
		//TODO fix update - dno how to
		else {
			okcount++;
			dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
			try {
				dbAccess.doSqlUpdate("ALTER TABLE" + getDigit("S"));
			} catch (DALException e) {
				e.printStackTrace();
			}
			finally{
				try{
					dbAccess.closeSql();
				}
				catch (SQLException e) {
					e.printStackTrace();
				}
			}
			return terminalTare();
		}
		
		
	}

	@Override
	public String terminalOkGetPrescription(String productBatchNumber) throws Exception {
		return getPrescription(productBatchNumber);
	}
	
	@Override
	public String terminalOkGetMaterialId(String productBatchNumber) throws Exception {
		return getMaterialId(productBatchNumber);
	}
	
	@Override
	public String terminalOkGetMaterialName(String productBatchNumber) throws Exception {
		return getMaterialName(productBatchNumber);
	}
	
	@Override
	public String getConnection() {
		return con.getHost() + ":" + con.getPort();
	}


	@Override
	public String terminalMessage(String msg) {
	con.getTerminalResponse("D " + msg);
		return "msg";
	}

	
	@Override
	public String terminalDisplay() {
		con.getTerminalResponse("DW");
		
		return "Weight is now displayed on scale";
	}
	
	
	@Override
	public boolean tolerableWeight(String productBatchNumber) throws Exception {
		boolean tolerable = false;
		double weight = getCurrentWeight();
		double netto = getNetto(productBatchNumber);
		double tolerance = getTolerance(productBatchNumber);
			if( weight <= netto+(netto/100*tolerance) && weight >= netto-(netto/100*tolerance)){
				tolerable = true;
			}
			else {
				tolerable = false;
			}
		return tolerable;
	}
	
	
	@Override
	public double getCurrentWeight() {
		String str = "S";
		double weight = Double.parseDouble(getDigit(str));
		return weight;
	}

	
	private String getPrescription(String productBatchNumber) throws Exception {
		ResultSet prescriptionNumber = null;
		String prescription = null;
		dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
		try {
			prescriptionNumber = dbAccess.doSqlQuery("SELECT pre_id FROM productbatch WHERE pb_id = '" + productBatchNumber + "'");
			if(prescriptionNumber.next()) {
				prescription = prescriptionNumber.getString("pre_id");
			}
		} 
		catch (DALException e) {
			e.printStackTrace();			
		}
		catch (SQLException f) {
			f.printStackTrace();
		}
		finally{
			try{
				dbAccess.closeSql();
				prescriptionNumber.close();
			}
			catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return prescription;
	}
	
	private String getMaterialId(String productBatchNumber) throws Exception{
		String prescriptionId = getPrescription(productBatchNumber);
		ResultSet materialIdResultSet = null;
		String materialId = null;
		dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
		try{
			materialIdResultSet = dbAccess.doSqlQuery("SELECT m_id FROM precomponent WHERE pre_id = '" + prescriptionId + "'");
			if(materialIdResultSet.next()){
				materialId = materialIdResultSet.getString("m_id");
			}
		}
		catch (DALException e) {
			e.printStackTrace();
		}
		catch (SQLException f) {
			f.printStackTrace();
		}
		finally{
			try{
				dbAccess.closeSql();
				materialIdResultSet.close();
			}
			catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return materialId;
	}
	
	private String getMaterialName(String productBatchNumber) throws Exception{
		String materialId = getMaterialId(productBatchNumber);
		ResultSet materialNameResultSet = null;
		String materialName = null;
		dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
		try{
			materialNameResultSet = dbAccess.doSqlQuery("SELECT m_name FROM materials WHERE m_id = '" + materialId + "'");
			if(materialNameResultSet.next()){
				materialName = materialNameResultSet.getString("m_name");
			}
		}
		catch (DALException e) {
			e.printStackTrace();
		}
		catch (SQLException f) {
			f.printStackTrace();
		}
		finally{
			try{
				dbAccess.closeSql();
				materialNameResultSet.close();
			}
			catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return materialName;
	}
	
	private double getNetto(String productBatchNumber) throws Exception{
		String materialId = getMaterialId(productBatchNumber);
		String prescriptionId = getPrescription(productBatchNumber);
		ResultSet nettoResultSet = null;
		double nettoDouble = 0;
		dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
		try{
			nettoResultSet = dbAccess.doSqlQuery("SELECT netto FROM precomponent WHERE pre_id = '" + prescriptionId + "' AND m_id = '" + materialId + "'");
			if(nettoResultSet.next()){
				nettoDouble = nettoResultSet.getDouble("netto");
			}
		}
		catch (DALException e) {
			e.printStackTrace();
		}
		catch (SQLException f) {
			f.printStackTrace();
		}
		finally{
			try{
				dbAccess.closeSql();
				nettoResultSet.close();
			}
			catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return nettoDouble;
	}

	private double getTolerance(String productBatchNumber) throws Exception{
		String materialId = getMaterialId(productBatchNumber);
		String prescriptionId = getPrescription(productBatchNumber);
		ResultSet toleranceResultSet = null;
		double tolerancedouble = 0;
		dbAccess = new DBAccess("72.13.93.206", 3307, "gruppe55", "gruppe55", "55gruppe");
		try{
			toleranceResultSet = dbAccess.doSqlQuery("SELECT tolerance FROM precomponent WHERE pre_id = '" + prescriptionId + "' AND m_id = '" + materialId + "'");
			if(toleranceResultSet.next()){
				tolerancedouble = toleranceResultSet.getDouble("tolerance");
			}
		}
		catch (DALException e) {
			e.printStackTrace();
		}
		catch (SQLException f) {
			f.printStackTrace();
		}
		finally{
			try{
				dbAccess.closeSql();
				toleranceResultSet.close();
			}
			catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return tolerancedouble;
	}
	
	private String getDigit(String str) {
		String res = "";
		
		Pattern p = Pattern.compile("-?[\\d+.\\d+]");
		Matcher m = p.matcher(str);
		
		while(m.find()) {
			res += m.group();
		}
		
		return res;
	}
	
	private String getUnit(String str) {
		return str.substring(str.length() - 2).trim();
	}
}
